# -*- coding: utf-8 -*-
"""Breast Cancer .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KFsu7DFjn-NQ4TJrtlRCF-p-rZMhre2h

# Breast Cancer Detection with Machine Learning

# Get Data from Sklearn Dataset
"""

from sklearn.model_selection import cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import precision_score,recall_score
from sklearn.model_selection import cross_val_predict
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from sklearn.datasets import load_breast_cancer

data = load_breast_cancer()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.DataFrame(data.data, columns=data.feature_names)

df['target'] = data ['target']

def scatterplot(feature1):
    sns.scatterplot(x=feature1, y='target', data=df, hue='target', palette={0: 'blue', 1: 'red'})
    plt.show()

data=df

df.head()

df['target'].value_counts()

df.info()

corr_matrix = df.corr()
corr_matrix["target"].sort_values(ascending=False)

plt.figure(figsize=(20,20))
sns.heatmap(corr_matrix, annot=True)



scatterplot('mean radius')

malignant_data = df[df['target'] == 1]
mean_radius_malignant = malignant_data['mean radius'].mean()
max_radius_malignant = malignant_data['mean radius'].max()
print(mean_radius_malignant)
print(max_radius_malignant)

df['benign mean radius'] = (df['mean radius'] > max_radius_malignant).astype(int)

scatterplot('mean texture')

rows_to_drop = df[df['mean texture'] > 35].index

df.drop(rows_to_drop, inplace=True)

df.reset_index(drop=True, inplace=True)

scatterplot('mean texture')

scatterplot('mean perimeter')

malignant_data = df[df['target'] == 1]
mean_perimeter_malignant = malignant_data['mean perimeter'].mean()
max_perimeter_malignant = malignant_data['mean perimeter'].max()
print(mean_perimeter_malignant)
print(max_perimeter_malignant)

df['benign mean perimete'] = (df['mean perimeter'] > max_perimeter_malignant ).astype(int)

scatterplot('mean area')

malignant_data = df[df['target'] == 1]
mean_area_malignant = malignant_data['mean area'].mean()
max_area_malignant = malignant_data['mean area'].max()
print(mean_area_malignant)
print(max_area_malignant)

df['benign mean area'] = (df['mean area'] > max_area_malignant).astype(int)

scatterplot('mean smoothness')

rows_to_drop = df[df['mean smoothness'] > 0.16].index

df.drop(rows_to_drop, inplace=True)

df.reset_index(drop=True, inplace=True)

scatterplot('mean smoothness')

scatterplot('mean compactness')

rows_to_drop = df[df['mean compactness'] > 0.30].index

df.drop(rows_to_drop, inplace=True)

df.reset_index(drop=True, inplace=True)

malignant_data = df[df['target'] == 1]
mean_compactness_malignant = malignant_data['mean compactness'].mean()
max_compactness_malignant = malignant_data['mean compactness'].max()
print(mean_compactness_malignant)
print(max_compactness_malignant)

df['benign mean compactness'] = (df['mean compactness'] > max_compactness_malignant).astype(int)

scatterplot('mean concavity')

rows_to_drop = df[df['mean concavity'] > 0.40].index

df.drop(rows_to_drop, inplace=True)

df.reset_index(drop=True, inplace=True)

scatterplot('mean concavity')

scatterplot('mean concave points')

malignant_data = df[df['target'] == 1]
mean_concave_points_malignant = malignant_data['mean concave points'].mean()
max_concave_points_malignant = malignant_data['mean concave points'].max()
print(mean_concave_points_malignant)
print(max_concave_points_malignant)

df['benign mean concave points'] = (df['mean concave points'] >max_concave_points_malignant).astype(int)

scatterplot('mean symmetry')

rows_to_drop = df[df['mean symmetry'] > 0.300].index

df.drop(rows_to_drop, inplace=True)

df.reset_index(drop=True, inplace=True)

scatterplot('mean fractal dimension')

rows_to_drop = df[df['mean fractal dimension'] > 0.09].index

df.drop(rows_to_drop, inplace=True)

df.reset_index(drop=True, inplace=True)

correlation_matrix = df.corr()
# احتساب الارتباط مع العمود الهدف
target_correlation = correlation_matrix['target'].sort_values(ascending=False)
target_correlation

df['perimeter_to_radius_reduction_ratio'] = (df['mean radius'] - df['mean perimeter']) / df['mean radius']

train, test, train_labels, test_labels = train_test_split(df,df['target'], test_size=0.2, random_state=42)  # يمكن تعديل حجم الاختبار حسب الحاجة

# استخدم الدالة drop بتحديد فهرس الأعمدة التي تريد حذفها
column_indices_to_drop = [31, 32, 33, 34,35,36]  # قم بتحديد فهرس الأعمدة التي تريد حذفها

# استخدم الدالة drop لحذف الأعمدة بالفهرس
df.drop(columns=df.columns[column_indices_to_drop], inplace=True)

data=df.copy()

sgd_clf = SGDClassifier(random_state=42)
sgd_clf.fit(train, train_labels)

cross_val_score(sgd_clf, train, train_labels, cv=3,
scoring="accuracy")

y_train_pred = cross_val_predict(sgd_clf,train, train_labels, cv=3)

cm = confusion_matrix(train_labels, y_train_pred)
cm

precision_score(train_labels, y_train_pred)

recall_score(train_labels, y_train_pred)

f1_score(train_labels, y_train_pred)

gnb = GaussianNB()
gnb.fit(train, train_labels)

cross_val_score(gnb, train, train_labels, cv=3,
scoring="accuracy")

y_train_pred = cross_val_predict(gnb,train, train_labels, cv=3)

cm = confusion_matrix(train_labels, y_train_pred)
cm

recall_score(train_labels, y_train_pred)

preds = gnb.predict(test)
print(preds, "\n")

cm = confusion_matrix(preds,test_labels )
cm

lg = LogisticRegression()
lg.fit(train, train_labels)

cross_val_score(lg, train, train_labels, cv=3,
scoring="accuracy")

y_train_pred = cross_val_predict(lg,train, train_labels, cv=3)

cm = confusion_matrix(train_labels, y_train_pred)
cm

recall_score(train_labels, y_train_pred)

preds = lg.predict(test)
print(preds, "\n")

cm = confusion_matrix(preds,test_labels )
cm